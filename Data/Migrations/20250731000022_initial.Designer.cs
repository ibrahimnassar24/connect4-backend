// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using connect4_backend.Data;

#nullable disable

namespace connect4_backend.Data.Migrations
{
    [DbContext(typeof(Connect4Context))]
    [Migration("20250731000022_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("connect4_backend.Data.Models.Friend", b =>
                {
                    b.Property<string>("Sender")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("sender");

                    b.Property<string>("Receiver")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("receiver");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("closedAt");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Status")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.HasKey("Sender", "Receiver")
                        .HasName("PK__friends__E805F0FA29B8F55C");

                    b.HasIndex("Receiver");

                    b.ToTable("friends", (string)null);
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Match", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("FirstPlayer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("firstPlayer");

                    b.Property<string>("SecondPlayer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("secondPlayer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.Property<string>("Winner")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("winner");

                    b.HasKey("Id")
                        .HasName("PK__matches__3213E83FBB0E952B");

                    b.HasIndex("FirstPlayer");

                    b.HasIndex("SecondPlayer");

                    b.HasIndex("Winner");

                    b.ToTable("matches", (string)null);
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("Link")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("link");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("message");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("receiver");

                    b.Property<string>("Type")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("PK__notifica__3213E83F725FFC79");

                    b.HasIndex("Receiver");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Profile", b =>
                {
                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("AvatarUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("avatarUrl");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("bio");

                    b.Property<string>("CoverUrl")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("coverUrl");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("createdAt");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("lastName");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updatedAt");

                    b.HasKey("Email")
                        .HasName("PK__profiles__AB6E6165731325AE");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Friend", b =>
                {
                    b.HasOne("connect4_backend.Data.Models.Profile", "ReceiverNavigation")
                        .WithMany("FriendReceiverNavigations")
                        .HasForeignKey("Receiver")
                        .IsRequired()
                        .HasConstraintName("FK__friends__receive__3B75D760");

                    b.HasOne("connect4_backend.Data.Models.Profile", "SenderNavigation")
                        .WithMany("FriendSenderNavigations")
                        .HasForeignKey("Sender")
                        .IsRequired()
                        .HasConstraintName("FK__friends__sender__3A81B327");

                    b.Navigation("ReceiverNavigation");

                    b.Navigation("SenderNavigation");
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Match", b =>
                {
                    b.HasOne("connect4_backend.Data.Models.Profile", "FirstPlayerNavigation")
                        .WithMany("MatchFirstPlayerNavigations")
                        .HasForeignKey("FirstPlayer")
                        .IsRequired()
                        .HasConstraintName("fk_firstPlayer");

                    b.HasOne("connect4_backend.Data.Models.Profile", "SecondPlayerNavigation")
                        .WithMany("MatchSecondPlayerNavigations")
                        .HasForeignKey("SecondPlayer")
                        .IsRequired()
                        .HasConstraintName("fk_secondPlayer");

                    b.HasOne("connect4_backend.Data.Models.Profile", "WinnerNavigation")
                        .WithMany("MatchWinnerNavigations")
                        .HasForeignKey("Winner")
                        .HasConstraintName("fk_winner");

                    b.Navigation("FirstPlayerNavigation");

                    b.Navigation("SecondPlayerNavigation");

                    b.Navigation("WinnerNavigation");
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Notification", b =>
                {
                    b.HasOne("connect4_backend.Data.Models.Profile", "ReceiverNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("Receiver")
                        .IsRequired()
                        .HasConstraintName("fk_notifications_receiver");

                    b.Navigation("ReceiverNavigation");
                });

            modelBuilder.Entity("connect4_backend.Data.Models.Profile", b =>
                {
                    b.Navigation("FriendReceiverNavigations");

                    b.Navigation("FriendSenderNavigations");

                    b.Navigation("MatchFirstPlayerNavigations");

                    b.Navigation("MatchSecondPlayerNavigations");

                    b.Navigation("MatchWinnerNavigations");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
